#!/bin/bash
#
# Note: FreeBSD installs bash at /usr/local/bin, so this script
# requires a symbolc link to that location.
#
# Note: Windows 10 NFS Client fails after a while when executing
# this script. Instead, use Windows SMBFS (Windows network client).
#
# Run this script as root to configure, compile and install
# libobjc.so.4.x, libdispatch.so, (if needed by the platform,)
# gnustep-make, gnustep-base, gnustep-gui, gnustep-back,
# gnustep-corebase,
# and essential applications: ProjectCenter, GWorkspace,
# (including PDFKit,) SystemPreferences, Gorm, and the
# Windows Theme on Windows with a single command.
# The script expects the various targets (EG tools-make) to
# be subdirectories of the current working directory.
#
# Examples:
#
# ./compile-all
#
# <uses `--prefix=/usr/local/GNUstep' as option to configure,
# and builds and installs everything using GCC>
#
# ./compile-all /usr/local/GNUstep
#
# <uses `--prefix=/usr/local/GNUstep' as option to configure,
# and builds and installs everything using GCC>
#
# ./compile-all /usr/local/GNUstep gcc g++
#
# <uses `--prefix=/usr/local/GNUstep' as option to configure,
# and builds and installs everything, compiling with GCC>
#
# ./compile-all /usr/local/GNUstep clang clang++
#
# <uses `--prefix=/usr/local/GNUstep' as option to configure,
# and builds and installs everything, compiling with CLANG>
#
# ./compile-all /usr/local/GNUstep <CCompiler> <C++Compiler> base-only
#
# <uses `--prefix=/usr/local/GNUstep' as option to configure,
# and only builds and installs the GNUstep Base/Foundation
# (libgnustep-base.*) and GNUStep Core Base/Core Foundation
# (libgnustep-corebase.*), compiling with the specified compilers
# as above>
#
# ./compile-all /usr/local/GNUstep <CCompiler> <C++Compiler> <BaseOnly> install-only
# <uses `--prefix=/usr/local/GNUstep' and only installs, without
# building first, the GNUstep components as directed above that
# have been assumed to have been built and compiled with the
# specified compilers. The prefix path must match the path
# implied by the GNUSTEP_MAKEFILES environment variable>

SUDO='sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH'
KERNEL=`uname -s | awk '{print tolower($0)}'`
scriptsdir="`pwd`/tools-scripts"

if [ "$1" != "" ]; then
   prefix="$1"
else
# Prefer /usr/local/GNUstep to /usr/GNUstep to conform better to UNIX FHS
#  https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard .
#  Note: Required for modern macOS, for which /usr/ is read-only
   prefix="/usr/local/GNUstep"
fi

if [ "$5" == "install-only" ]; then
    INSTALLONLY="true"
	echo "$0: Not using supplied prefix "$prefix
	prefix=$GNUSTEP_MAKEFILES | sed 's|\(/.*/GNUstep\).*|\1|'
	echo "$0: Installing using prefix "$prefix" derived from GNUSTEP_MAKEFILES environment variable"
	read -p "$0: Continue: ARE YOU SURE? Press <CTRL>-C to abort, <RETURN> to continue... " input
	if [ "$4" == "base-only" ]; then
		BASEONLY="true"
	else
		BASEONLY="false"
	fi
else
	INSTALLONLY="false"
# Avoid the deteection of a previous installation
	unset GNUSTEP_MAKEFILES

	if [ "$2" == "" ]; then
	   export CC=gcc
	else
	   export CC="$2"
	fi

	if [ "$3" == "" ]; then
	   export CXX=g++
	else
	   export CXX="$3"
	fi

	if [ "$4" == "base-only" ]; then
		BASEONLY="true"
	else
		BASEONLY="false"
	fi
fi

# Check if we are compiling under windows. Must not use MSYS shell
UNAME=`uname | cut -d'-' -f1`
if [ "$UNAME" == "MSYS_NT" ] ; then
   echo "$0: Cannot build in an MSYS shell. Switch to a MINGW64 shell and restart"
   exit 1
else
   if [ "$UNAME" != "MINGW64_NT" ] ; then
      if [ ! \( -d $prefix -a -w $prefix \) ] ; then
         if [ ! \( -d $(basename $prefix) -a -w $(basename $prefix) \) ] ; then
            NEEDSROOT="true"
         fi
      fi
   fi
fi

if [ "$UNAME" == "MINGW64_NT" ] ; then
   CPUS=`nproc`
else
   if [ "$UNAME" == "FreeBSD" ] ; then
      CPUS=`sysctl -n hw.ncpu`
   else
      if [ "$UNAME" == "Linux" ] ; then
         CPUS=`nproc`
	  else
	     echo "$0: Unknown platform "$UNAME". Needs porting?"
	     exit 1
      fi
   fi
fi

# If we are installing into home, then we do not need root...
if
   echo $prefix | grep "^/home/"
then
   unset NEEDSROOT
   make_flags="--disable-importing-config-file"
fi

if gmake -v >/dev/null 2>&1
then
  export MAKE="gmake -j${CPUS}"
else
  export MAKE="make -j${CPUS}"
fi

echo "$0: ==== compile-all in "`pwd`
if [ "true" == "$INSTALLONLY" ]; then
	echo "$0: NOT BUILDING. Installing only at path defined by GNUSTEP_MAKEFILES "$GNUSTEP_MAKEFILES
fi
echo "$0: Using C compiler $CC"
echo "$0: Using C++ compiler $CXX"
echo "$0: ===="

# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
if [ "$UNAME" == "MINGW64_NT" ] ; then
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# C flags for GCC, MINGW64
if [ "$CC" == "gcc" ] ; then
   export CFLAGS="-I/usr/local/include -fstrict-aliasing -fno-omit-frame-pointer"
fi

# C flags for CLANG, libobcj4.so, blocks. Note: -fobjc-nonfragile-abi generates compiler warnings on FreeBSD. Do we need it on Linux?
if [ "$CC" == "clang" ] ; then
   export CFLAGS="-I/usr/local/include -fblocks ${CFLAGS}"
fi

# C++ flags
export CXXFLAGS="-std=c++11"

# Build/Install GNUstep Make
echo "$0: Installing GNUstep into ${prefix}"
cd tools-make

if [ "false" == "$INSTALLONLY" ]; then
# It is expected that this fails if this code has not been built before
	echo "$0: Cleaning old build if present. Make will fail otherwise"
	$MAKE distclean

	if [ "$CC" == "gcc" ]; then
	   echo "$0: ==== BUILDING WITH GCC"
	   echo "$0: CFLAGS: "$CFLAGS
	   echo "$0: CXXFLAGS: "$CXXFLAGS
	   echo "$0: LDFLAGS: "$LDFLAGS
	   echo "$0: Configure GNUstep Make command: ./configure --prefix=${prefix} --enable-native-objc-exceptions --with-layout=gnustep $make_flags"

	   echo "$0: ===="
	   ./configure --prefix=${prefix} --enable-native-objc-exceptions --with-layout=gnustep ${make_flags}
	else
	   echo "$0: ==== BUILDING WITH CLANG"
	   export RUNTIME_VERSION=gnustep-2.0
	   if [ "$UNAME" == "FreeBSD" ] ; then
		  export LD=/usr/local/bin/ld.gold
# Assume the presence of libdispatch if we are using clang and libobjc2 (libobjc.so.4.x.) Specifying it directly make configure report that the C compiler does not work
		  export LDFLAGS="-fuse-ld=${LD} -L/usr/local/lib"
		  export PKG_CONFIG=/usr/local/bin/pkgconf
	   else
		  if [ "$UNAME" == "Linux" ] ; then
			 export LD=/usr/bin/ld.gold
# Can't link with libdispatch until we've built it
			 export LDFLAGS="-fuse-ld=${LD} -L/usr/local/lib"
			 export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
		  else
			 echo "$0: Unknown platform "$UNAME". Needs porting?"
			 exit 1
		  fi
	   fi
	   echo "$0: CFLAGS: "$CFLAGS
	   echo "$0: CXXFLAGS: "$CXXFLAGS
	   echo "$0: LDFLAGS: "$LDFLAGS
	   echo "$0: ==== Configure GNUstep Make command: ./configure --prefix=${prefix} --with-library-combo=ng-gnu-gnu --enable-objc-arc --enable-native-objc-exceptions --enable-install-ld-so-conf --with-layout=gnustep ${make_flags}"
	   ./configure --prefix=${prefix} --with-library-combo=ng-gnu-gnu --enable-objc-arc --enable-native-objc-exceptions --enable-install-ld-so-conf --with-layout=gnustep ${make_flags}
	fi
	if [ ! "$?" = "0" ]; then
			echo "$0: ==== Configure GNUstep Make FAILED"
			exit 1
	fi
fi

if [ "$UNAME" == "MINGW64_NT" ] ; then
# Wait to edit newly created GNUstep make configuration. The test to verify that native Objective C exceptions fails to identify working exceptions in modern GCC.
   echo "$0: Is 'USE_OBJC_EXCEPTIONS = yes' in the newly created `pwd`/config.make? If not, edit it before continuing"
   read -p "$0: About to install GNUstep Make. Continue: ARE YOU SURE? Press <CTRL>-C to abort, <RETURN> to continue... " input
fi

# Install GNUstep Make after configuration...
echo "$0: ==== Installing GNUstep Make..."
$MAKE
if [ ! "$?" = "0" ]; then
        echo "$0: ==== Install GNUstep Make FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root $MAKE install
else
   $MAKE install
fi 
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

. $prefix/System/Library/Makefiles/GNUstep.sh

if [ "false" == "$INSTALLONLY" ]; then
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Wait to edit makefiles after installing GNUstep Make
	   echo "$0: After installing GNUstep Make, gnustep-config --objc-flags reports:" `gnustep-config --objc-flags`
	   read -p "$0: About to clean, build, install Base. Have Objective C exceptions been enabled? Continue: ARE YOU SURE? Press <CTRL>-C to abort, <RETURN> to continue... " input
	fi
fi

# If we are building with clang and also building libobjc2 (libobjc.so.4.x), we need to build libdispatch and libobjc.so.4.x and then install GNUstep make again
if [ "$CC" == "clang" ] ; then
   if [ "$UNAME" == "FreeBSD" ] ; then
      NEEDSLIBOBJC2="false"
      echo "$0: FreeBSD uses libobjc.so.4.x provided with the operating system"
   else
      if [ "$UNAME" == "Linux" ] ; then
         NEEDSLIBOBJC2="true"
         echo "$0: Linux uses libobjc.so.4.x that will be built now"
	  else
	     echo "$0: Unknown platform "$UNAME". Needs porting?"
	     exit 1
      fi
   fi
fi
if [ "true" == "$NEEDSLIBOBJC2" ]; then
# Build/Install libdispatch
   cd ../swift-corelibs-libdispatch
   
	if [ "false" == "$INSTALLONLY" ]; then
	   echo "$0: ==== Building libdispatch..."
	   rm -rf build
	   mkdir build
	   cd build
	   cmake .. -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=Release -DUSE_GOLD_LINKER=YES
	   $MAKE
	   if [ ! "$?" = "0" ]; then
		  echo "$0: ==== Build libdispatch FAILED"
		  exit 1
	   fi
	   cd ..
	fi

   echo "$0: ==== Installing libdispatch..."
   cd build
   if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
      MSYS=winsymlinks:lnk ; export MSYS
   fi
   # Note: libdispatch.so installs in /usr/local/lib/
   if [ "true" == "$NEEDSROOT" ]; then
      ${SUDO} -u root -E $MAKE install
      ${SUDO} ldconfig
   else
      $MAKE install
   fi
   if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
      MSYS=winsymlinks:nativestrict ; export MSYS
   fi
   if [ "$UNAME" == "Linux" ] ; then
# After installing libdispatch, link everything else with it.
# Note: When building on Raspbian PiOS (32 bit or 64 bit,) libdispatch.so and libBlocksRuntime.so are installed in a
# CPU architecture-specific subdireectory of /usr/local/lib/. Need symlinks to the binaries
	 export LDFLAGS="-fuse-ld=${LD} -L/usr/local/lib -ldispatch"
   fi
   
# Build/Install libobjc2
   cd ../../libobjc2

	if [ "false" == "$INSTALLONLY" ]; then
	   echo "$0: ==== Building libobjc2 (libobjc.so.4.x)..."
	   rm -rf build
	   mkdir build
	   cd build
	   cmake ../ -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_ASM_COMPILER=$CC -DTESTS=OFF
	   cmake --build .
	   if [ ! "$?" = "0" ]; then
		  echo "$0: ==== Build libobjc2 (libobjc.so.4.x) FAILED"
		  exit 1
	   fi
	   cd ..
	fi
	
   echo "$0: ==== Installing libobjc2 (libobjc.so.4.x)..."
   cd build
   if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
      MSYS=winsymlinks:lnk ; export MSYS
   fi
# Note: libobjc2 (libobjc.so.4.x) installs in $prefix/Local/Library/Libraries/
   if [ "true" == "$NEEDSROOT" ]; then
      ${SUDO} -u root -E $MAKE install
      ${SUDO} ldconfig
   else
      $MAKE install
   fi
   if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
      MSYS=winsymlinks:nativestrict ; export MSYS
   fi

# Reconfigure/Reinstall GNUstep Make #2 to pick up libobjc2...
   cd ../../tools-make

	if [ "false" == "$INSTALLONLY" ]; then
	   echo "$0: ==== Configure GNUstep Make #2 command: ./configure --prefix=${prefix} --with-library-combo=ng-gnu-gnu --enable-objc-arc --enable-native-objc-exceptions --enable-install-ld-so-conf --with-layout=gnustep ${make_flags}"
	   ./configure --prefix=${prefix} --with-library-combo=ng-gnu-gnu --enable-objc-arc --enable-native-objc-exceptions --enable-install-ld-so-conf --with-layout=gnustep ${make_flags}
	   if [ ! "$?" = "0" ]; then
		  echo "$0: ==== Configure GNUstep Make #2 FAILED"
		  exit 1
	   fi
	fi
	
   echo "$0: ==== Installing GNUstep Make #2..."
   $MAKE
   if [ ! "$?" = "0" ]; then
      echo "$0: ==== Install GNUstep Make #2 FAILED"
	  exit 1
   fi
   if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
      MSYS=winsymlinks:lnk ; export MSYS
   fi
   if [ "true" == "$NEEDSROOT" ]; then
      ${SUDO} -u root $MAKE install
   else
      $MAKE install
   fi
   if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
      MSYS=winsymlinks:nativestrict ; export MSYS
   fi

   . $prefix/System/Library/Makefiles/GNUstep.sh

fi

# Build/Install GNUstep Make Documentation
cd ../tools-make/Documentation

if [ "false" == "$INSTALLONLY" ]; then
	echo "$0: ==== Building GNUstep Make Documentation..."
	$MAKE clean
	. $prefix/System/Library/Makefiles/GNUstep.sh
	$MAKE
	if [ ! "$?" = "0" ]; then
			echo "$0: ==== Build GNUstep make Documentation FAILED"
			exit 1
	fi
fi

echo "$0: ==== Installing GNUstep Make Documentation..."
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root ./install.sh $prefix $MAKE
else
   $MAKE install
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# Build/Install GNUstep Base (Foundation)
cd ../../libs-base

if [ "false" == "$INSTALLONLY" ]; then
	echo "$0: ==== Building GNUstep Base (Foundation)..."
	$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM distclean
	. $prefix/System/Library/Makefiles/GNUstep.sh
	$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
	if [ ! "$?" = "0" ]; then
			echo "$0: ==== Build GNUstep Base (Foundation) FAILED"
			exit 1
	fi
fi

echo "$0: ==== Installing GNUstep Base (Foundation)..."
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root ./install.sh $prefix $MAKE
else
   $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# Build/Install GNUstep Base (Foundation) Documentation
cd ../libs-base/Documentation

if [ "false" == "$INSTALLONLY" ]; then
	echo "$0: ==== Building GNUstep Base (Foundation) Documentation..."
	$MAKE clean
	. $prefix/System/Library/Makefiles/GNUstep.sh
	$MAKE
	if [ ! "$?" = "0" ]; then
			echo "$0: ==== Build GNUstep Base (Foundation) Documentation FAILED"
			exit 1
	fi
fi

echo "$0: ==== Installing GNUstep Base (Foundation) Documentation..."
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root ./install.sh $prefix $MAKE
else
   $MAKE install
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# Build/Install GNUstep CoreBase (Core Foundation)
cd ../../libs-corebase

if [ "false" == "$INSTALLONLY" ]; then
	echo "$0: ==== Building GNUstep CoreBase (Core Foundation)..."
	$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM distclean
	. $prefix/System/Library/Makefiles/GNUstep.sh
# FreeBSD: Make sure that the GNUstep Objective C header files are in front any others
# Linux: Make sure that ICU header files for Linux can be found
	CFLAGS="-I/usr/local/GNUstep/Local/Library/Headers -I/usr/local/include" ./configure
	$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
	if [ ! "$?" = "0" ]; then
		echo "$0: ==== Build GNUstep CoreBase (Core Foundation) FAILED"
		exit 1
	fi
fi

echo "$0: ==== Installing GNUstep CoreBase (Core Foundation)..."
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
${SUDO} -u root -E $MAKE install messages=yes
else
   $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# Not only building/installing GNUstep Base, CoreBase?
if [ "false" == "$BASEONLY" ]; then
# Build/Install GNUstep GUI (Cocoa AppKit)
	cd ../libs-gui

	if [ "false" == "$INSTALLONLY" ]; then
		echo "$0: ==== Building GNUstep GUI (Cocoa AppKit)..."
		$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM distclean
		. $prefix/System/Library/Makefiles/GNUstep.sh
		./configure --enable-imagemagick
# FreeBSD requires a symbolic link in /usr/local/include: ln -s ImageMagick-7/MagicCore magick
		$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
		if [ ! "$?" = "0" ]; then
				echo "$0: ==== Build GNUstep GUI (Cocoa AppKit) FAILED"
				exit 1
		fi
	fi

	echo "$0: ==== Installing GNUstep GUI (Cocoa AppKit)..."
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
	   MSYS=winsymlinks:lnk ; export MSYS
	fi
	if [ "true" == "$NEEDSROOT" ]; then
	   ${SUDO} -u root ./install.sh $prefix $MAKE
	else
	   $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
	fi
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
	   MSYS=winsymlinks:nativestrict ; export MSYS
	fi

# Build/Install GNUstep Backend Graphics
	cd ../libs-back

	if [ "false" == "$INSTALLONLY" ]; then
		echo "$0: ==== Building GNUstep Backend Graphics..."
		$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM distclean
		. $prefix/System/Library/Makefiles/GNUstep.sh
		$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
		if [ ! "$?" = "0" ]; then
				echo "$0: ==== Build GNUstep Backend Graphics FAILED"
				exit 1
		fi
	fi
	
	echo "$0: ==== Installing GNUstep Backend Graphics..."
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
	   MSYS=winsymlinks:lnk ; export MSYS
	fi
	if [ "true" == "$NEEDSROOT" ]; then
	   ${SUDO} -u root ./install.sh $prefix $MAKE
	else
	   $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
	fi
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
	   MSYS=winsymlinks:nativestrict ; export MSYS
	fi
	. $prefix/System/Library/Makefiles/GNUstep.sh

# Build/Install essential applications: ProjectCenter
	cd ../apps-projectcenter

	if [ "false" == "$INSTALLONLY" ]; then
		echo "$0: ==== Building GNUstep Projectcenter..."
		$MAKE distclean
		$MAKE
		if [ ! "$?" = "0" ]; then
				echo "$0: ==== Build GNUstep ProjectCenter FAILED"
				exit 1
		fi
	fi
	
	echo "$0: ==== Installing GNUstep Projectcenter..."
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
	   MSYS=winsymlinks:lnk ; export MSYS
	fi
	if [ "true" == "$NEEDSROOT" ]; then
	   ${SUDO} -u root -E $MAKE install
	else
	   $MAKE install
	fi
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
	   MSYS=winsymlinks:nativestrict ; export MSYS
	fi

# Build/Install essential applications: PDFKit
	cd ../PDFKit

	if [ "false" == "$INSTALLONLY" ]; then
		echo "$0: ==== Building GNUstep PDFKit..."
		$MAKE distclean
		./configure
		$MAKE
		if [ ! "$?" = "0" ]; then
				echo "$0: ==== Build GNUstep PDFKit FAILED"
				exit 1
		fi
	fi
	
	echo "$0: ==== Installing GNUstep PDFKit..."
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
	   MSYS=winsymlinks:lnk ; export MSYS
	fi
	if [ "true" == "$NEEDSROOT" ]; then
	   ${SUDO} -u root -E $MAKE install
	else
	   $MAKE install
	fi
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
	   MSYS=winsymlinks:nativestrict ; export MSYS
	fi

# Build/Install essential applications: GWorkspace
	cd ../apps-gworkspace

	if [ "false" == "$INSTALLONLY" ]; then
		echo "$0: ==== Building GNUstep GWorkspace..."
		$MAKE distclean
		./configure
		$MAKE
		if [ ! "$?" = "0" ]; then
				echo "$0: ==== Build GNUstep GWorkspace FAILED"
				exit 1
		fi
	fi
	
	echo "$0: ==== Installing GNUstep GWorkspace..."
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
	   MSYS=winsymlinks:lnk ; export MSYS
	fi
	if [ "true" == "$NEEDSROOT" ]; then
	   ${SUDO} -u root -E $MAKE install
	else
	   $MAKE install
	fi
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
	   MSYS=winsymlinks:nativestrict ; export MSYS
	fi

# Build/Install essential applications: SystemPreferences
	cd ../apps-systempreferences

	if [ "false" == "$INSTALLONLY" ]; then
		echo "$0: ==== Building GNUstep SystemPreferences..."
		$MAKE distclean
		$MAKE
		if [ ! "$?" = "0" ]; then
				echo "$0: ==== Build GNUstep SystemPreferences FAILED"
				exit 1
		fi
	fi
	
	echo "$0: ==== Installing GNUstep SystemPreferences..."
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
	   MSYS=winsymlinks:lnk ; export MSYS
	fi
	if [ "true" == "$NEEDSROOT" ]; then
	   ${SUDO} -u root -E $MAKE install
	else
	   $MAKE install
	fi
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
	   MSYS=winsymlinks:nativestrict ; export MSYS
	fi

# Build/Install essential applications: Gorm
	cd ../apps-gorm

	if [ "false" == "$INSTALLONLY" ]; then
		echo "$0: ==== Building GNUstep Gorm..."
		$MAKE distclean
		$MAKE
		if [ ! "$?" = "0" ]; then
				echo "$0: ==== Build GNUstep Gorm FAILED"
				exit 1
		fi
	fi
	
	echo "$0: ==== Installing GNUstep Gorm..."
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
	   MSYS=winsymlinks:lnk ; export MSYS
	fi
	if [ "true" == "$NEEDSROOT" ]; then
	   ${SUDO} -u root -E $MAKE install
	else
	   $MAKE install
	fi
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
	   MSYS=winsymlinks:nativestrict ; export MSYS
	fi

# After the last build/install operation, move back to the starting directory
	cd ../

# Perform other operations
	echo "$0: ==== Executing Platform-Specific Post-Installation script..."
	if [ "$UNAME" == "MINGW64_NT" ] ; then
# Execute post-install script
	   ${scriptsdir}/post-install-mingw64_nt
	else
	   echo "$0: Add script to etc and xsession..."
	   if [ ! -e /etc/profile.d/GNUstep.sh ]; then
		  ${SUDO} -u root ln -s $prefix/System/Library/Makefiles/GNUstep.sh /etc/profile.d/GNUstep.sh
	   fi
	   cd plugins-session
	   ${SUDO} -u root ./install.sh
	   cd ../
	   
# Execute post-install script
	   if [ "$UNAME" == "Linux" ] ; then
		 ${scriptsdir}/post-install-linux
	   else
		  if [ "$UNAME" == "FreeBSD" ] ; then
			 ${scriptsdir}/post-install-freebsd
		  else
			 if [ "$UNAME" == "Darwin" ] ; then
				${scriptsdir}/post-install-darwin
			 fi
		  fi
	   fi
	fi
fi

echo "$0: ==== compile-all Done. Use 'openapp GWorkspace' to test a full installation"
