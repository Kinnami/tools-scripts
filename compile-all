#!/bin/bash

#
# Run this script as root to configure, compile and install
# gnustep-make, gnustep-base, gnustep-gui, gnustep-back
# with a single command
#
# Examples:
#
# ./compile-all
#
# <uses `--prefix=/usr/GNUstep' as option to configure>
#
# ./compile-all /usr/local/GNUstep
#
# <uses `--prefix=/usr/local/GNUstep' as option to configure>
#

CPUS=`nproc`
SUDO='sudo LD_LIBRARY_PATH=$LD_LIBRARY_PATH'
KERNEL=`uname -s | awk '{print tolower($0)}'`
scriptsdir="`pwd`/tools-scripts"

# CJEC, 21-Jan-22: Avoid the deteection of a previous installation
unset GNUSTEP_MAKEFILES

if [ "$1" != "" ]; then 
   prefix="$1"
else
# CJEC, 24-Feb-22: prefer /usr/local/GNUstep to /usr/GNUstep to conform better to UNIX FHS https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard . Note: Required for modern macOS, for which /usr/ is read-only
   prefix="/usr/local/GNUstep"
fi

if [ "$2" != "" ]; then
   compiler="$2"
fi

if [ "$3" != "" ]; then
    cxxcompiler="$3"
fi

# Check if we are compiling under windows. Must not use MSYS shell
UNAME=`uname | cut -d'-' -f1`
if [ "$UNAME" == "MSYS_NT" ] ; then
   echo "$0: Cannot build in an MSYS shell. Switch to a MINGW64 shell and restart"
   exit 1
else
   if [ "$UNAME" != "MINGW64_NT" ] ; then
      if [ ! \( -d $prefix -a -w $prefix \) ] ; then
         if [ ! \( -d $(basename $prefix) -a -w $(basename $prefix) \) ] ; then
            NEEDSROOT="true"
         fi
      fi
   fi
fi

# If we are installing into home, then we do not need root...
if
   echo $prefix | grep "^/home/"
then
   unset NEEDSROOT
   make_flags="--disable-importing-config-file"
fi

if gmake -v >/dev/null 2>&1
then
  export MAKE="gmake -j${CPUS}"
else
  export MAKE="make -j${CPUS}"
fi

if [ "$2" == "" ]; then
   export CC=gcc
else
   export CC="$compiler"
fi

if [ "$3" == "" ]; then
   export CXX=g++
else
   export CXX=$cxxcompiler
fi

echo "$0: ==== compile-all in "`pwd`
echo "$0: Using compiler $CC"
echo "$0: Using c++ compiler $CXX"
echo "$0: ===="

# Flags for windows build.
if [ "$UNAME" == "MINGW64_NT" ] ; then
   export cc_flags="-v -fstrict-aliasing -fno-omit-frame-pointer"
   # CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# If we are building with clang, then add this to cc_flags
if [ "$CC" != "gcc" ] ; then
   export cc_flags="-fblocks -fobjc-nonfragile-abi ${cc_flags}"
fi

# Install make
echo "$0: Installing GNUstep into ${prefix}"
cd tools-make
# make distclean
if [ "$CC" == "gcc" ]; then
   echo "$0: ==== BUILDING WITH GCC"
   echo "$0: Build command: CCFLAGS=$cc_flags CC=$CC ./configure --prefix=${prefix} --enable-native-objc-exceptions --with-layout=gnustep $make_flags"

   echo "$0: ===="
   CCFLAGS=$cc_flags CXX=$CXX CC=$CC ./configure --prefix=${prefix} --with-layout=gnustep ${make_flags}
else
   echo "$0: ==== BUILDING WITH CLANG"
   unset CC
   unset CXX

    # Assume the presence of libdispatch if we are using clang and libobjc2
    export CC=${compiler}
    export CXX=${cxxcompiler}
    # export LDFLAGS=-ldispatch
    export LDFLAGS=-fuse-ld=gold -ldispatch
    echo "$0: ==== Configure Make command: CCFLAGS=${cc_flags} CXX=${CXX} CC=${CC} ./configure --prefix=${prefix} --with-library-combo=ng-gnu-gnu --enable-objc-arc --enable-native-objc-exceptions --with-layout=gnustep ${make_flags}"
    CCFLAGS=${cc_flags} CXX=${CXX} CC=${CC} ./configure --prefix=${prefix} --with-library-combo=ng-gnu-gnu --enable-objc-arc --enable-native-objc-exceptions --with-layout=gnustep ${make_flags}
fi
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Configure Make FAILED"
        exit 1
fi

if [ "$UNAME" == "MINGW64_NT" ] ; then
   # CJEC, 9-Dec-21: Wait to edit newly created GNUstep make configuration
   echo "$0: Is 'USE_OBJC_EXCEPTIONS = yes' in the newly created `pwd`/config.make? If not, edit it before continuing"
   read -p "$0: About to install Make. Continue: ARE YOU SURE? Press <CTRL>-C to abort, <RETURN> to continue... " input
fi

# Install make after configuration...
echo "$0: ==== Installing Make..."
$MAKE
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install Make FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root $MAKE install
else
   $MAKE install
fi 
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

. $prefix/System/Library/Makefiles/GNUstep.sh

# Setup clang specific libraries...
if [ "$CC" != "gcc" ]; then
   ${scriptsdir}/clang-setup "$CLANG" "$CLANGPP"
fi

if [ "$UNAME" == "MINGW64_NT" ] ; then
   # CJEC, 9-Dec-21: Wait to edit makefiles after installing make
   echo "$0: After installing Make, gnustep-config --objc-flags reports:" `gnustep-config --objc-flags`
   read -p "$0: About to clean, build, install Base. Have Objective C exceptions been enabled? Continue: ARE YOU SURE? Press <CTRL>-C to abort, <RETURN> to continue... " input
fi

# Install base
echo "$0: ==== Installing Base..."
cd ../libs-base
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM distclean
. $prefix/System/Library/Makefiles/GNUstep.sh
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root ./install.sh $prefix $MAKE
else
   $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install Base FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# Install gui
echo "$0: ==== Installing GUI..."
cd ../libs-gui
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM distclean
. $prefix/System/Library/Makefiles/GNUstep.sh
./configure --enable-imagemagick
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root ./install.sh $prefix $MAKE
else
   $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install GUI FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# Install back
echo "$0: ==== Installing Backend..."
cd ../libs-back
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM distclean
. $prefix/System/Library/Makefiles/GNUstep.sh
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root ./install.sh $prefix $MAKE
else
   $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install Backend FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# CJEC, 21-Jan-22: Install CoreBase
echo "$0: ==== Installing CoreBase..."
cd ../libs-corebase
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM distclean
. $prefix/System/Library/Makefiles/GNUstep.sh
   ./configure
$MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM debug=yes
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
if [ "true" == "$NEEDSROOT" ]; then
   ${SUDO} -u root ./install.sh $prefix $MAKE
else
   $MAKE GNUSTEP_INSTALLATION_DOMAIN=SYSTEM install
fi
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install CoreBase FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# CJEC, 10-Dec-21: Build essential tools
echo "$0: ==== Installing Projectcenter..."
cd ../apps-projectcenter
. $prefix/System/Library/Makefiles/GNUstep.sh
$MAKE distclean
$MAKE
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
$MAKE install
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install ProjectCenter FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

echo "$0: ==== Installing PDFKit..."
cd ../PDFKit
. $prefix/System/Library/Makefiles/GNUstep.sh
$MAKE distclean
./configure
$MAKE
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
$MAKE install
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install PDFKit FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

echo "$0: ==== Installing GWorkspace..."
cd ../apps-gworkspace
. $prefix/System/Library/Makefiles/GNUstep.sh
$MAKE distclean
./configure
$MAKE
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
$MAKE install
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install GWorkspace FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

echo "$0: ==== Installing SystemPreferences..."
cd ../apps-systempreferences
. $prefix/System/Library/Makefiles/GNUstep.sh
$MAKE distclean
$MAKE
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use emulated symbolic links so that tar can create files with dangling links during make install
   MSYS=winsymlinks:lnk ; export MSYS
fi
$MAKE install
if [ ! "$?" = "0" ]; then
        echo $0 ": ==== Install SystemPreferences FAILED"
        exit 1
fi
if [ "$UNAME" == "MINGW64_NT" ] ; then
# CJEC, 20-Jan-22: Switch MSYS to use native (real) symbolic links for building and avoiding .lnk files
   MSYS=winsymlinks:nativestrict ; export MSYS
fi

# After the last build operation, move back to the starting directory
cd ../

# Perform other operations
if [ "$UNAME" == "MINGW64_NT" ] ; then
   # Execute post-install script
   ${scriptsdir}/post-install-mingw64_nt
else
   echo "$0: Add script to etc and xsession..."
   if [ ! -e /etc/profile.d/GNUstep.sh ]; then
      ${SUDO} -u root ln -s /usr/GNUstep/System/Library/Makefiles/GNUstep.sh /etc/profile.d/GNUstep.sh
   fi
   cd plugins-session
   ${SUDO} -u root ./install.sh
   cd ../
   
   # Execute post-install script
   if [ "$UNAME" == "Linux" ] ; then
     ${scriptsdir}/post-install-linux
   else
      if [ "$UNAME" == "FreeBSD" ] ; then
         ${scriptsdir}/post-install-freebsd
      else
         if [ "$UNAME" == "Darwin" ] ; then
            ${scriptsdir}/post-install-darwin
         fi
      fi
   fi
fi

echo "$0: ==== compile-all Done. Use 'openapp GWorkspace' to test the installation"
